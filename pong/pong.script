local CONTACT_POINT_RESPONSE = hash("contact_point_response")

local LEFT = hash("left")
local RIGHT = hash("right")
local QUIT = hash("quit")

local WALL = hash("wall")

local PADDLE1
local PADDLE2

local GROUP_PADDLE = hash("paddle")
local GROUP_GOALP1 = hash("goalp1")
local GROUP_GOALP2 = hash("goalp2")

local BALL_SPEED = 180
local PADDLE_SPEED = 220
local PADDLE_WIDTH = 20
local PADDLE_HEIGHT = 4

local WIDTH = 240
local HEIGHT = 320

local ball_original_position
local ball_direction = vmath.vector3()
local ball_position = vmath.vector3()
local ball_speed

local paddle1_actions
local paddle1_speed
local paddle1_position
local paddle1_score

local paddle2_actions
local paddle2_speed
local paddle2_position
local paddle2_score


-- move paddle based on player/AI input
local function move_paddle(actions, position, speed, dt, id)
	if actions[RIGHT] then
		position.x = position.x + speed * dt
		if position.x > (WIDTH - PADDLE_WIDTH) then position.x = WIDTH - PADDLE_WIDTH end
		go.set_position(position, id)
	elseif actions[LEFT] then
		position.x = position.x - speed * dt
		if position.x < (0 + PADDLE_WIDTH) then position.x = 0 + PADDLE_WIDTH end
		go.set_position(position, id)
	end
	return position
end

local function update_score(score1, score2)
	label.set_text("score#label", ("%d : %d"):format(score1, score2))
end

local function reset_ball()
	ball_position.x = ball_original_position.x
	ball_position.y = ball_original_position.y
	ball_speed = BALL_SPEED
	ball_direction = vmath.normalize(vmath.vector3(math.random(-1, 1), math.random(3, 7) * (math.random(0, 1) > 0.5 and -1 or 1), 0))
	update_score(paddle1_score, paddle2_score)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	math.randomseed(os.time())

	PADDLE1 = msg.url("/paddle1")
	paddle1_actions = {}
	paddle1_speed = PADDLE_SPEED
	paddle1_position = go.get_position(PADDLE1)
	paddle1_score = 0

	PADDLE2 = msg.url("/paddle2")
	paddle2_actions = {}
	paddle2_speed = PADDLE_SPEED
	paddle2_position = go.get_position(PADDLE2)
	paddle2_score = 0

	-- store the original position of the ball so we can reset it
	ball_original_position = go.get_position()
	reset_ball()
end

local function inside(value, min, max)
	return value >= min and value <= max
end

function update(self, dt)
	-- move the ball in it's current direction
	-- with the specified speed (pixels/second)
	-- apply delta time for correct movement regardless
	-- of framerate
	ball_position.x = ball_position.x + ball_direction.x * ball_speed * dt
	ball_position.y = ball_position.y + ball_direction.y * ball_speed * dt

	-- goal?
	if ball_position.y > HEIGHT then
		paddle1_score = paddle1_score + 1
		reset_ball()
	elseif ball_position.y < 0 then
		paddle2_score = paddle2_score + 1
		reset_ball()
	end

	-- paddle?
	--[[if inside(ball_position.y, paddle1_position.y - PADDLE_HEIGHT, paddle1_position.y + PADDLE_HEIGHT)
	and inside(ball_position.x, paddle1_position.x - PADDLE_WIDTH, paddle1_position.x + PADDLE_WIDTH) then
		ball_direction.x = -(paddle1_position.x - ball_position.x) / PADDLE_WIDTH
		ball_direction.y = -ball_direction.y
		ball_position.y = paddle1_position.y + PADDLE_HEIGHT
	elseif inside(ball_position.y, paddle2_position.y - PADDLE_HEIGHT, paddle2_position.y + PADDLE_HEIGHT)
	and inside(ball_position.x, paddle2_position.x - PADDLE_WIDTH, paddle2_position.x + PADDLE_WIDTH) then
		ball_direction.x = -(paddle2_position.x - ball_position.x) / PADDLE_WIDTH
		ball_direction.y = -ball_direction.y
		ball_position.y = paddle2_position.y - PADDLE_HEIGHT
	end--]]

	-- sides?
	if ball_position.x < 0 then
		ball_position.x = 0
		ball_direction.x = -ball_direction.x
	elseif ball_position.x > WIDTH then
		ball_position.x = WIDTH
		ball_direction.x = -ball_direction.x
	end
	go.set_position(ball_position)


	-- paddle AI
	-- only move the ai paddle when the ball is travelling towards the paddle
	if (ball_position.y < paddle2_position.y and ball_direction.y > 0) then
		local horizontal_distance_to_ball = (paddle2_position.x - ball_position.x)
		-- update direction of movement when the horizontal distance to the ball
		-- is above a threshold
		-- reduce this value to make the AI react faster
		if math.abs(horizontal_distance_to_ball) > 16 then
			paddle2_actions[RIGHT] = horizontal_distance_to_ball < 0
			paddle2_actions[LEFT] = horizontal_distance_to_ball > 0
			paddle2_speed = (math.abs(horizontal_distance_to_ball) / PADDLE_SPEED) * 2000
		end
	else
		paddle2_actions[LEFT] = nil
		paddle2_actions[RIGHT] = nil
	end

	paddle1_position = move_paddle(paddle1_actions, paddle1_position, paddle1_speed, dt, PADDLE1)
	paddle2_position = move_paddle(paddle2_actions, paddle2_position, paddle2_speed, dt, PADDLE2)
end

function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT_RESPONSE then
		-- change bounce direction
		ball_direction.y = -ball_direction.y
		-- separate collision objects
		ball_position.x = ball_position.x + message.normal.x * message.distance
		ball_position.y = ball_position.y + message.normal.y * message.distance
		-- change horizontal movement depending on where the ball hit
		local dist = go.get_position(message.other_id).x - ball_position.x
		ball_direction.x = -dist / PADDLE_WIDTH
	end
end

function on_input(self, action_id, action)
	if action then
		-- store pressed/released state in action map
		-- we check these values in update() to move the
		-- paddle every frame
		if action.pressed then
			paddle1_actions[action_id] = true
		elseif action.released then
			paddle1_actions[action_id] = false
		end
		if action_id == QUIT then
			sys.exit(0)
			html5.run("window.close()")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
